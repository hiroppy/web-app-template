exports[`no-stripe > should put files 1`] = `
[
  "internal-tests-output-no-stripe/.dockerignore",
  "internal-tests-output-no-stripe/.editorconfig",
  "internal-tests-output-no-stripe/.env",
  "internal-tests-output-no-stripe/.env.sample",
  "internal-tests-output-no-stripe/.env.test",
  "internal-tests-output-no-stripe/.github/actions/setup-db/action.yml",
  "internal-tests-output-no-stripe/.github/actions/setup-node/action.yml",
  "internal-tests-output-no-stripe/.github/copilot-instructions.md",
  "internal-tests-output-no-stripe/.github/workflows/auto-update-tests-on-failure.yml",
  "internal-tests-output-no-stripe/.github/workflows/ci.yml",
  "internal-tests-output-no-stripe/.gitignore",
  "internal-tests-output-no-stripe/.node-version",
  "internal-tests-output-no-stripe/.npmrc",
  "internal-tests-output-no-stripe/.vscode/extensions.json",
  "internal-tests-output-no-stripe/.vscode/mcp.json",
  "internal-tests-output-no-stripe/.vscode/settings.json",
  "internal-tests-output-no-stripe/Dockerfile",
  "internal-tests-output-no-stripe/README.md",
  "internal-tests-output-no-stripe/biome.json",
  "internal-tests-output-no-stripe/compose.yml",
  "internal-tests-output-no-stripe/env.ts",
  "internal-tests-output-no-stripe/knip.config.ts",
  "internal-tests-output-no-stripe/lefthook.yml",
  "internal-tests-output-no-stripe/next.config.ts",
  "internal-tests-output-no-stripe/otel-collector-config.yml",
  "internal-tests-output-no-stripe/package.json",
  "internal-tests-output-no-stripe/playwright.config.ts",
  "internal-tests-output-no-stripe/pnpm-lock.yaml",
  "internal-tests-output-no-stripe/pnpm-workspace.yaml",
  "internal-tests-output-no-stripe/postcss.config.mjs",
  "internal-tests-output-no-stripe/prisma.config.ts",
  "internal-tests-output-no-stripe/prisma/schema/ERD.md",
  "internal-tests-output-no-stripe/prisma/schema/item.prisma",
  "internal-tests-output-no-stripe/prisma/schema/migrations/migration_lock.toml",
  "internal-tests-output-no-stripe/prisma/schema/schema.prisma",
  "internal-tests-output-no-stripe/prisma/schema/user.prisma",
  "internal-tests-output-no-stripe/public/.gitkeep",
  "internal-tests-output-no-stripe/renovate.json",
  "internal-tests-output-no-stripe/src/app/(private)/layout.tsx",
  "internal-tests-output-no-stripe/src/app/(private)/me/_components/UpdateMyInfo.tsx",
  "internal-tests-output-no-stripe/src/app/(private)/me/page.tsx",
  "internal-tests-output-no-stripe/src/app/(public)/layout.tsx",
  "internal-tests-output-no-stripe/src/app/(public)/page.tsx",
  "internal-tests-output-no-stripe/src/app/(public)/signin/page.tsx",
  "internal-tests-output-no-stripe/src/app/@dialog/(.)create/Content.tsx",
  "internal-tests-output-no-stripe/src/app/@dialog/(.)create/default.tsx",
  "internal-tests-output-no-stripe/src/app/@dialog/(.)create/page.tsx",
  "internal-tests-output-no-stripe/src/app/@dialog/_components/Dialog.tsx",
  "internal-tests-output-no-stripe/src/app/@dialog/default.tsx",
  "internal-tests-output-no-stripe/src/app/@dialog/page.tsx",
  "internal-tests-output-no-stripe/src/app/_actions/auth.test.ts",
  "internal-tests-output-no-stripe/src/app/_actions/auth.ts",
  "internal-tests-output-no-stripe/src/app/_actions/items.test.ts",
  "internal-tests-output-no-stripe/src/app/_actions/items.ts",
  "internal-tests-output-no-stripe/src/app/_actions/types.ts",
  "internal-tests-output-no-stripe/src/app/_actions/users.test.ts",
  "internal-tests-output-no-stripe/src/app/_actions/users.ts",
  "internal-tests-output-no-stripe/src/app/_clients/nextAuth.ts",
  "internal-tests-output-no-stripe/src/app/_clients/nextAuthConfig.ts",
  "internal-tests-output-no-stripe/src/app/_clients/prisma.ts",
  "internal-tests-output-no-stripe/src/app/_components/Button.tsx",
  "internal-tests-output-no-stripe/src/app/_components/Container.tsx",
  "internal-tests-output-no-stripe/src/app/_components/ErrorPageTemplate.tsx",
  "internal-tests-output-no-stripe/src/app/_components/Footer.tsx",
  "internal-tests-output-no-stripe/src/app/_components/FormBox.tsx",
  "internal-tests-output-no-stripe/src/app/_components/Header.tsx",
  "internal-tests-output-no-stripe/src/app/_components/Input.tsx",
  "internal-tests-output-no-stripe/src/app/_components/SignInButton.tsx",
  "internal-tests-output-no-stripe/src/app/_components/SignOutButton.tsx",
  "internal-tests-output-no-stripe/src/app/_hooks/useFormId.test.ts",
  "internal-tests-output-no-stripe/src/app/_hooks/useFormId.ts",
  "internal-tests-output-no-stripe/src/app/_hooks/useOnlineStatus.test.ts",
  "internal-tests-output-no-stripe/src/app/_hooks/useOnlineStatus.ts",
  "internal-tests-output-no-stripe/src/app/_schemas/items.test.ts",
  "internal-tests-output-no-stripe/src/app/_schemas/items.ts",
  "internal-tests-output-no-stripe/src/app/_schemas/users.test.ts",
  "internal-tests-output-no-stripe/src/app/_schemas/users.ts",
  "internal-tests-output-no-stripe/src/app/_utils/date.test.ts",
  "internal-tests-output-no-stripe/src/app/_utils/date.ts",
  "internal-tests-output-no-stripe/src/app/_utils/db.test.ts",
  "internal-tests-output-no-stripe/src/app/_utils/db.ts",
  "internal-tests-output-no-stripe/src/app/_utils/zod.test.ts",
  "internal-tests-output-no-stripe/src/app/_utils/zod.ts",
  "internal-tests-output-no-stripe/src/app/api/auth/[...nextauth]/route.ts",
  "internal-tests-output-no-stripe/src/app/api/health/route.test.ts",
  "internal-tests-output-no-stripe/src/app/api/health/route.ts",
  "internal-tests-output-no-stripe/src/app/error.tsx",
  "internal-tests-output-no-stripe/src/app/favicon.ico",
  "internal-tests-output-no-stripe/src/app/global-error.tsx",
  "internal-tests-output-no-stripe/src/app/globals.css",
  "internal-tests-output-no-stripe/src/app/globals.d.ts",
  "internal-tests-output-no-stripe/src/app/layout.tsx",
  "internal-tests-output-no-stripe/src/app/not-found.tsx",
  "internal-tests-output-no-stripe/src/app/opengraph-image.tsx",
  "internal-tests-output-no-stripe/src/app/robots.txt",
  "internal-tests-output-no-stripe/src/instrumentation.ts",
  "internal-tests-output-no-stripe/src/middleware.test.ts",
  "internal-tests-output-no-stripe/src/middleware.ts",
  "internal-tests-output-no-stripe/src/otel/node.ts",
  "internal-tests-output-no-stripe/tests/build.mjs",
  "internal-tests-output-no-stripe/tests/db.setup.ts",
  "internal-tests-output-no-stripe/tests/vitest.helper.ts",
  "internal-tests-output-no-stripe/tests/vitest.setup.ts",
  "internal-tests-output-no-stripe/tsconfig.json",
  "internal-tests-output-no-stripe/vitest.config.ts",
  "mocked/migration.sql"
]
`;

exports[`no-stripe > should update .env.sample 1`] = `
[
  "# Next.js",
  "NEXT_PUBLIC_SITE_URL=http://localhost:3000",
  "",
  "# Database",
  "DATABASE_USER=local",
  "DATABASE_PASSWORD=1234",
  "DATABASE_DB=database",
  "DATABASE_HOST=localhost",
  "DATABASE_PORT=5432",
  "DATABASE_SCHEMA=public",
  "# for prisma migration, not used in development, test and production",
  "DATABASE_URL=postgresql://\${DATABASE_USER}:\${DATABASE_PASSWORD}@\${DATABASE_HOST}:\${DATABASE_PORT}/\${DATABASE_DB}?schema=\${DATABASE_SCHEMA}",
  "",
  "# Google OAuth",
  "# https://console.cloud.google.com/apis/credentials",
  "# Set values below",
  "# AUTHORIZED JAVASCRIPT ORIGINS: http://localhost:3000",
  "# AUTHORIZED REDIRECT URIS: http://localhost:3000/api/auth/callback/google",
  "GOOGLE_CLIENT_ID=xxxx",
  "GOOGLE_CLIENT_SECRET=xxxx",
  "",
  "# NextAuth.js",
  "NEXTAUTH_URL=\${NEXT_PUBLIC_SITE_URL}",
  "# https://next-auth.js.org/configuration/options#secret",
  "# you must generate a new secret",
  "# error: \\"ikm\\" must be at least one byte in length'",
  "# $ openssl rand -base64 32",
  "NEXTAUTH_SECRET=TKDdLVjf7cTyTs5oWVpv04senu6fia4RGQbYHRQIR5Q=",
  "",
  "# OpenTelemetry",
  "TRACE_EXPORTER_URL=",
  "",
  ""
]
`;

exports[`no-stripe > should update .env.test 1`] = `
[
  "# Next.js",
  "NEXT_PUBLIC_SITE_URL=http://localhost:3000",
  "",
  "# Database",
  "DATABASE_USER=local",
  "DATABASE_PASSWORD=1234",
  "DATABASE_DB=database",
  "DATABASE_HOST=localhost",
  "DATABASE_PORT=5432",
  "DATABASE_SCHEMA=public",
  "# for prisma migration, not used in development, test and production",
  "DATABASE_URL=postgresql://\${DATABASE_USER}:\${DATABASE_PASSWORD}@\${DATABASE_HOST}:\${DATABASE_PORT}/\${DATABASE_DB}?schema=\${DATABASE_SCHEMA}",
  "",
  "# Google OAuth",
  "# https://console.cloud.google.com/apis/credentials",
  "# Set values below",
  "# AUTHORIZED JAVASCRIPT ORIGINS: http://localhost:3000",
  "# AUTHORIZED REDIRECT URIS: http://localhost:3000/api/auth/callback/google",
  "GOOGLE_CLIENT_ID=dummy",
  "GOOGLE_CLIENT_SECRET=dummy",
  "",
  "# NextAuth.js",
  "NEXTAUTH_URL=\${NEXT_PUBLIC_SITE_URL}",
  "# https://next-auth.js.org/configuration/options#secret",
  "# you must generate a new secret",
  "# error: \\"ikm\\" must be at least one byte in length'",
  "# $ openssl rand -base64 32",
  "NEXTAUTH_SECRET=TKDdLVjf7cTyTs5oWVpv04senu6fia4RGQbYHRQIR5Q=",
  "NEXTAUTH_TEST_MODE=true",
  "",
  "# OpenTelemetry",
  "TRACE_EXPORTER_URL=",
  "",
  ""
]
`;

exports[`no-stripe > should update .github/workflows/ci.yml 1`] = `
[
  "name: ci",
  "",
  "on:",
  "  pull_request:",
  "    branches:",
  "      - main",
  "    paths:",
  "      - .github/workflows/ci.yml",
  "      - package.json",
  "      - src/**",
  "      - e2e/**",
  "      - Dockerfile",
  "  push:",
  "    branches:",
  "      - main",
  "    paths:",
  "      - .github/workflows/ci.yml",
  "      - package.json",
  "      - src/**",
  "      - e2e/**",
  "      - Dockerfile",
  "",
  "jobs:",
  "  lint:",
  "    runs-on: ubuntu-latest",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - run: pnpm lint",
  "      - run: npx biome check . && npx prettier --check './**/*.{md,yml}'",
  "  build:",
  "    runs-on: ubuntu-latest",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - uses: ./.github/actions/setup-db",
  "      - run: pnpm build",
  "  build-docker:",
  "    runs-on: ubuntu-latest",
  "    env:",
  "      NEXT_PUBLIC_SITE_URL: http://localhost:3000",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - uses: ./.github/actions/setup-db",
  "      - run: |",
  "          docker build \\\\",
  "            -t app \\\\",
  "            -f Dockerfile \\\\",
  "            --add-host=host.docker.internal:host-gateway \\\\",
  "            --build-arg DATABASE_USER=\${{env.DATABASE_USER}} \\\\",
  "            --build-arg DATABASE_PASSWORD=\${{env.DATABASE_PASSWORD}} \\\\",
  "            --build-arg DATABASE_DB=\${{env.DATABASE_DB}} \\\\",
  "            --build-arg DATABASE_HOST=\${{env.DATABASE_HOST}} \\\\",
  "            --build-arg DATABASE_PORT=\${{env.DATABASE_PORT}} \\\\",
  "            --build-arg DATABASE_SCHEMA=\${{env.DATABASE_SCHEMA}} \\\\",
  "            --build-arg GOOGLE_CLIENT_ID=\${{env.GOOGLE_CLIENT_ID}} \\\\",
  "            --build-arg GOOGLE_CLIENT_SECRET=\${{env.GOOGLE_CLIENT_SECRET}} \\\\",
  "            --build-arg NEXT_PUBLIC_SITE_URL=\${{env.NEXT_PUBLIC_SITE_URL}} \\\\",
  "            --build-arg NEXTAUTH_SECRET=\${{env.NEXTAUTH_SECRET}} \\\\",
  "            --build-arg TRACE_EXPORTER_URL=\${{env.TRACE_EXPORTER_URL}} \\\\",
  "            .",
  "        env:",
  "          # please set the following environment variables as github secrets",
  "          DATABASE_USER: local",
  "          DATABASE_PASSWORD: 1234",
  "          DATABASE_DB: database",
  "          DATABASE_HOST: host.docker.internal",
  "          DATABASE_PORT: 5432",
  "          DATABASE_SCHEMA: public",
  "          NEXTAUTH_SECRET: TKDdLVjf7cTyTs5oWVpv04senu6fia4RGQbYHRQIR5Q=",
  "          GOOGLE_CLIENT_ID: dummy",
  "          GOOGLE_CLIENT_SECRET: dummy",
  "          TRACE_EXPORTER_URL: \\"\\"",
  "      - run: docker run -d -p 3000:3000 app",
  "      - run: |",
  "          until $(curl --output /dev/null --silent --fail \${{env.NEXT_PUBLIC_SITE_URL}}); do",
  "            printf '!'",
  "            sleep 1",
  "          done",
  "        timeout-minutes: 1",
  "  unit-test:",
  "    runs-on: ubuntu-latest",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - run: pnpm test",
  "  e2e-test:",
  "    runs-on: ubuntu-latest",
  "    env:",
  "      NEXTAUTH_SECRET: UfxvOS6HetHOFkL44YTITYgc0DOuOlz5TBp3jkbnZ3w=",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - run: pnpm exec playwright install chromium",
  "      - run: pnpm build:test",
  "      - run: pnpm test:e2e",
  ""
]
`;

exports[`no-stripe > should update Dockerfile 1`] = `
[
  "FROM node:22.16.0-slim AS base",
  "",
  "ARG DATABASE_USER=''",
  "ARG DATABASE_PASSWORD=''",
  "ARG DATABASE_DB=''",
  "ARG DATABASE_HOST=''",
  "ARG DATABASE_PORT=''",
  "ARG DATABASE_SCHEMA=''",
  "ARG GOOGLE_CLIENT_ID=''",
  "ARG GOOGLE_CLIENT_SECRET=''",
  "ARG NEXT_PUBLIC_SITE_URL=''",
  "ARG NEXTAUTH_SECRET=''",
  "ARG TRACE_EXPORTER_URL=''",
  "",
  "ENV PNPM_HOME=\\"/pnpm\\"",
  "ENV PATH=\\"$PNPM_HOME:$PATH\\"",
  "ENV DATABASE_USER=$DATABASE_USER",
  "ENV DATABASE_PASSWORD=$DATABASE_PASSWORD",
  "ENV DATABASE_DB=$DATABASE_DB",
  "ENV DATABASE_HOST=$DATABASE_HOST",
  "ENV DATABASE_PORT=$DATABASE_PORT",
  "ENV DATABASE_SCHEMA=$DATABASE_SCHEMA",
  "ENV GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID",
  "ENV GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET",
  "ENV NEXT_PUBLIC_SITE_URL=$NEXT_PUBLIC_SITE_URL",
  "ENV NEXTAUTH_SECRET=$NEXTAUTH_SECRET",
  "ENV NEXTAUTH_URL=$NEXT_PUBLIC_SITE_URL",
  "ENV TRACE_EXPORTER_URL=$TRACE_EXPORTER_URL",
  "",
  "COPY . /app",
  "WORKDIR /app",
  "",
  "RUN npm run setup",
  "# for prisma",
  "RUN apt-get update -y && apt-get install -y openssl",
  "",
  "FROM base AS prod-deps",
  "",
  "RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm i --prod --frozen-lockfile",
  "RUN pnpm prisma generate --generator client",
  "",
  "FROM base AS build",
  "",
  "RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm i --frozen-lockfile",
  "RUN pnpm build",
  "",
  "FROM base AS app",
  "",
  "COPY --from=prod-deps /app/node_modules /app/node_modules",
  "COPY --from=build /app/.next /app/.next",
  "",
  "EXPOSE 3000",
  "CMD [\\"pnpm\\", \\"start\\"]",
  ""
]
`;

exports[`no-stripe > should update README.md 1`] = `
[
  "## Setup",
  "",
  "\`\`\`sh",
  "# enable corepack",
  "$ npm run setup",
  "# install deps",
  "$ pnpm i",
  "# create \\".env\\" and modify environment variables",
  "$ cp .env.sample .env",
  "\`\`\`",
  "",
  "## Development",
  "",
  "\`\`\`sh",
  "$ pnpm dev",
  "\`\`\`",
  "",
  "## Production",
  "",
  "\`\`\`sh",
  "$ pnpm db:up",
  "$ pnpm build",
  "$ pnpm start",
  "\`\`\`",
  "",
  "### Observability",
  "",
  "This template uses Jaeger as a tracing platform. The local environment doesn't require \`TRACE_EXPORTER_URL\` environment value.",
  "",
  "\`\`\`sh",
  "# open Jaeger",
  "$ open http://localhost:16686/",
  "\`\`\`",
  "",
  "## Test",
  "",
  "### Unit Test",
  "",
  "\`\`\`sh",
  "$ pnpm test",
  "$ pnpm test:watch",
  "\`\`\`",
  "",
  "### E2E Test",
  "",
  "A build task must be executed before running tests to bypass JWT logic.",
  "",
  "\`\`\`sh",
  "# install chrome",
  "$ pnpm exec playwright install chrome",
  "# build using test environments since it needs to change encode/decode functions of next-auth",
  "$ pnpm build:test",
  "",
  "$ pnpm test:e2e",
  "$ pnpm test:e2e:ui",
  "\`\`\`",
  "",
  "## Database",
  "",
  "\`\`\`sh",
  "$ pnpm db:migrate",
  "$ pnpm db:reset",
  "# view the database items",
  "$ pnpm db:studio",
  "\`\`\`",
  "",
  "## Links",
  "",
  "- [Database ER diagram](/prisma/schema/ERD.md)",
  "- [Web App Template](https://hiroppy.github.io/web-app-template/)",
  ""
]
`;

exports[`no-stripe > should update dependencies 1`] = `
{
  "dependencies": [
    "@auth/prisma-adapter",
    "@hookform/resolvers",
    "@next/env",
    "@opentelemetry/exporter-metrics-otlp-grpc",
    "@opentelemetry/exporter-trace-otlp-grpc",
    "@opentelemetry/instrumentation-http",
    "@opentelemetry/resources",
    "@opentelemetry/sdk-metrics",
    "@opentelemetry/sdk-node",
    "@opentelemetry/sdk-trace-base",
    "@opentelemetry/semantic-conventions",
    "@prisma/client",
    "@prisma/instrumentation",
    "clsx",
    "next",
    "next-auth",
    "prisma",
    "react",
    "react-dom",
    "react-hook-form",
    "zod"
  ],
  "devDependencies": [
    "@axe-core/playwright",
    "@biomejs/biome",
    "@playwright/test",
    "@tailwindcss/postcss",
    "@testing-library/react",
    "@types/node",
    "@types/react",
    "@types/react-dom",
    "@vitejs/plugin-react",
    "jsdom",
    "knip",
    "lefthook",
    "prettier",
    "prisma-erd-generator",
    "tailwindcss",
    "testcontainers",
    "typescript",
    "vitest"
  ]
}
`;

exports[`no-stripe > should update env.ts 1`] = `
[
  "import { loadEnvConfig } from \\"@next/env\\";",
  "import { z } from \\"zod\\";",
  "",
  "const staticEnv = z.object({",
  "  NODE_ENV: z",
  "    .union([",
  "      z.literal(\\"development\\"),",
  "      z.literal(\\"test\\"),",
  "      z.literal(\\"production\\"),",
  "    ])",
  "    .default(\\"development\\"),",
  "",
  "  // for client and server",
  "  NEXT_PUBLIC_SITE_URL: z.string().url(),",
  "",
  "  // for server",
  "  DATABASE_USER: z.string().min(1),",
  "  DATABASE_PASSWORD: z.string().min(1),",
  "  DATABASE_DB: z.string().min(1),",
  "  DATABASE_HOST: z.string().min(1),",
  "  DATABASE_PORT: z.coerce.number().min(1),",
  "  DATABASE_SCHEMA: z.string().min(1),",
  "",
  "  GOOGLE_CLIENT_ID: z.string().min(1),",
  "  GOOGLE_CLIENT_SECRET: z.string().min(1),",
  "",
  "  NEXTAUTH_URL: z.string().min(1),",
  "  NEXTAUTH_SECRET: z.string().min(1),",
  "",
  "  TRACE_EXPORTER_URL: z.string().url().optional().or(z.literal(\\"\\")),",
  "});",
  "",
  "const runtimeEnv = z.object({});",
  "",
  "export type Schema = z.infer<typeof schema>;",
  "",
  "const schema = z.intersection(staticEnv, runtimeEnv);",
  "",
  "export function config(kind: \\"static\\" | \\"runtime\\" = \\"static\\") {",
  "  const { combinedEnv } = loadEnvConfig(process.cwd());",
  "  const res =",
  "    kind === \\"static\\"",
  "      ? staticEnv.safeParse(combinedEnv)",
  "      : runtimeEnv.safeParse(combinedEnv);",
  "",
  "  if (res.error) {",
  "    console.error(\\"\\\\x1b[31m%s\\\\x1b[0m\\", \\"[Errors] environment variables\\");",
  "    console.error(JSON.stringify(res.error.errors, null, 2));",
  "    process.exit(1);",
  "  }",
  "}",
  ""
]
`;

exports[`no-stripe > should update prisma/schema/user.prisma 1`] = `
[
  "enum Role {",
  "  USER",
  "  ADMIN",
  "}",
  "",
  "// https://authjs.dev/getting-started/adapters/prisma#schema",
  "model Account {",
  "  id                String   @id @default(cuid())",
  "  userId            String   @map(\\"user_id\\")",
  "  type              String",
  "  provider          String",
  "  providerAccountId String   @map(\\"provider_account_id\\")",
  "  refresh_token     String?  @db.Text",
  "  access_token      String?  @db.Text",
  "  expires_at        Int?",
  "  token_type        String?",
  "  scope             String?",
  "  id_token          String?  @db.Text",
  "  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)",
  "  createdAt         DateTime @default(now()) @map(\\"created_at\\")",
  "  updatedAt         DateTime @updatedAt @map(\\"updated_at\\")",
  "",
  "  @@unique([provider, providerAccountId])",
  "  @@map(\\"accounts\\")",
  "}",
  "",
  "model User {",
  "  id            String    @id @default(cuid())",
  "  name          String?",
  "  email         String?   @unique",
  "  emailVerified DateTime? @map(\\"email_verified\\")",
  "  image         String?",
  "  accounts      Account[]",
  "  createdAt     DateTime  @default(now()) @map(\\"created_at\\")",
  "  updatedAt     DateTime  @updatedAt @map(\\"updated_at\\")",
  "  // https://authjs.dev/guides/basics/role-based-access-control",
  "  role          Role      @default(USER)",
  "  items         Item[]",
  "  stripeId      String?   @unique @map(\\"stripe_id\\") // cus_XXXX",
  "",
  "  @@map(\\"users\\")",
  "}",
  ""
]
`;
