exports[`common > should put files 1`] = `
[
  "internal-tests-output-common/.dockerignore",
  "internal-tests-output-common/.editorconfig",
  "internal-tests-output-common/.env",
  "internal-tests-output-common/.env.sample",
  "internal-tests-output-common/.env.test",
  "internal-tests-output-common/.github/actions/setup-db/action.yml",
  "internal-tests-output-common/.github/actions/setup-node/action.yml",
  "internal-tests-output-common/.github/copilot-instructions.md",
  "internal-tests-output-common/.github/workflows/ci.yml",
  "internal-tests-output-common/.gitignore",
  "internal-tests-output-common/.node-version",
  "internal-tests-output-common/.npmrc",
  "internal-tests-output-common/.vscode/extensions.json",
  "internal-tests-output-common/.vscode/mcp.json",
  "internal-tests-output-common/.vscode/settings.json",
  "internal-tests-output-common/Dockerfile",
  "internal-tests-output-common/README.md",
  "internal-tests-output-common/biome.json",
  "internal-tests-output-common/compose.yml",
  "internal-tests-output-common/env.ts",
  "internal-tests-output-common/knip.config.ts",
  "internal-tests-output-common/lefthook.yml",
  "internal-tests-output-common/next.config.ts",
  "internal-tests-output-common/otel-collector-config.yml",
  "internal-tests-output-common/package.json",
  "internal-tests-output-common/playwright.config.ts",
  "internal-tests-output-common/pnpm-lock.yaml",
  "internal-tests-output-common/pnpm-workspace.yaml",
  "internal-tests-output-common/postcss.config.mjs",
  "internal-tests-output-common/prisma.config.ts",
  "internal-tests-output-common/prisma/schema/ERD.md",
  "internal-tests-output-common/prisma/schema/item.prisma",
  "internal-tests-output-common/prisma/schema/migrations/migration_lock.toml",
  "internal-tests-output-common/prisma/schema/schema.prisma",
  "internal-tests-output-common/prisma/schema/user.prisma",
  "internal-tests-output-common/public/.gitkeep",
  "internal-tests-output-common/renovate.json",
  "internal-tests-output-common/tests/build.mjs",
  "internal-tests-output-common/tests/db.setup.ts",
  "internal-tests-output-common/tests/vitest.helper.ts",
  "internal-tests-output-common/tests/vitest.setup.ts",
  "internal-tests-output-common/tsconfig.json",
  "internal-tests-output-common/vitest.config.ts",
  "mocked/migration.sql"
]
`;

exports[`common > should update .env.sample 1`] = `
[
  "# Next.js",
  "NEXT_PUBLIC_SITE_URL=http://localhost:3000",
  "",
  "# Database",
  "DATABASE_USER=local",
  "DATABASE_PASSWORD=1234",
  "DATABASE_DB=database",
  "DATABASE_HOST=localhost",
  "DATABASE_PORT=5432",
  "DATABASE_SCHEMA=public",
  "# for prisma migration, not used in development, test and production",
  "DATABASE_URL=postgresql://\${DATABASE_USER}:\${DATABASE_PASSWORD}@\${DATABASE_HOST}:\${DATABASE_PORT}/\${DATABASE_DB}?schema=\${DATABASE_SCHEMA}",
  "",
  "# Google OAuth",
  "# https://console.cloud.google.com/apis/credentials",
  "# Set values below",
  "# AUTHORIZED JAVASCRIPT ORIGINS: http://localhost:3000",
  "# AUTHORIZED REDIRECT URIS: http://localhost:3000/api/auth/callback/google",
  "GOOGLE_CLIENT_ID=xxxx",
  "GOOGLE_CLIENT_SECRET=xxxx",
  "",
  "# NextAuth.js",
  "NEXTAUTH_URL=\${NEXT_PUBLIC_SITE_URL}",
  "# https://next-auth.js.org/configuration/options#secret",
  "# you must generate a new secret",
  "# error: \\"ikm\\" must be at least one byte in length'",
  "# $ openssl rand -base64 32",
  "NEXTAUTH_SECRET=TKDdLVjf7cTyTs5oWVpv04senu6fia4RGQbYHRQIR5Q=",
  "",
  "# OpenTelemetry",
  "TRACE_EXPORTER_URL=",
  "",
  "# Stripe",
  "STRIPE_SECRET_KEY=xxxx",
  "STRIPE_WEBHOOK_SECRET=xxxx",
  "STRIPE_PRICE_ID=xxxx",
  ""
]
`;

exports[`common > should update .env.test 1`] = `
[
  "# Next.js",
  "NEXT_PUBLIC_SITE_URL=http://localhost:3000",
  "",
  "# Database",
  "DATABASE_USER=local",
  "DATABASE_PASSWORD=1234",
  "DATABASE_DB=database",
  "DATABASE_HOST=localhost",
  "DATABASE_PORT=5432",
  "DATABASE_SCHEMA=public",
  "# for prisma migration, not used in development, test and production",
  "DATABASE_URL=postgresql://\${DATABASE_USER}:\${DATABASE_PASSWORD}@\${DATABASE_HOST}:\${DATABASE_PORT}/\${DATABASE_DB}?schema=\${DATABASE_SCHEMA}",
  "",
  "# Google OAuth",
  "# https://console.cloud.google.com/apis/credentials",
  "# Set values below",
  "# AUTHORIZED JAVASCRIPT ORIGINS: http://localhost:3000",
  "# AUTHORIZED REDIRECT URIS: http://localhost:3000/api/auth/callback/google",
  "GOOGLE_CLIENT_ID=dummy",
  "GOOGLE_CLIENT_SECRET=dummy",
  "",
  "# NextAuth.js",
  "NEXTAUTH_URL=\${NEXT_PUBLIC_SITE_URL}",
  "# https://next-auth.js.org/configuration/options#secret",
  "# you must generate a new secret",
  "# error: \\"ikm\\" must be at least one byte in length'",
  "# $ openssl rand -base64 32",
  "NEXTAUTH_SECRET=TKDdLVjf7cTyTs5oWVpv04senu6fia4RGQbYHRQIR5Q=",
  "NEXTAUTH_TEST_MODE=true",
  "",
  "# OpenTelemetry",
  "TRACE_EXPORTER_URL=",
  "",
  "# Stripe",
  "STRIPE_SECRET_KEY=dummy",
  "STRIPE_WEBHOOK_SECRET=dummy",
  "STRIPE_PRICE_ID=dummy",
  ""
]
`;

exports[`common > should update .github/workflows/ci.yml 1`] = `
[
  "name: ci",
  "",
  "on:",
  "  pull_request:",
  "    branches:",
  "      - main",
  "    paths:",
  "      - .github/workflows/ci.yml",
  "      - package.json",
  "      - src/**",
  "      - e2e/**",
  "      - Dockerfile",
  "  push:",
  "    branches:",
  "      - main",
  "    paths:",
  "      - .github/workflows/ci.yml",
  "      - package.json",
  "      - src/**",
  "      - e2e/**",
  "      - Dockerfile",
  "",
  "jobs:",
  "  lint:",
  "    runs-on: ubuntu-latest",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - run: pnpm lint",
  "      - run: npx biome check . && npx prettier --check './**/*.{md,yml}'",
  "  build:",
  "    runs-on: ubuntu-latest",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - uses: ./.github/actions/setup-db",
  "      - run: pnpm build",
  "  build-docker:",
  "    runs-on: ubuntu-latest",
  "    env:",
  "      NEXT_PUBLIC_SITE_URL: http://localhost:3000",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - uses: ./.github/actions/setup-db",
  "      - run: |",
  "          docker build \\\\",
  "            -t app \\\\",
  "            -f Dockerfile \\\\",
  "            --add-host=host.docker.internal:host-gateway \\\\",
  "            --build-arg DATABASE_USER=\${{env.DATABASE_USER}} \\\\",
  "            --build-arg DATABASE_PASSWORD=\${{env.DATABASE_PASSWORD}} \\\\",
  "            --build-arg DATABASE_DB=\${{env.DATABASE_DB}} \\\\",
  "            --build-arg DATABASE_HOST=\${{env.DATABASE_HOST}} \\\\",
  "            --build-arg DATABASE_PORT=\${{env.DATABASE_PORT}} \\\\",
  "            --build-arg DATABASE_SCHEMA=\${{env.DATABASE_SCHEMA}} \\\\",
  "            --build-arg GOOGLE_CLIENT_ID=\${{env.GOOGLE_CLIENT_ID}} \\\\",
  "            --build-arg GOOGLE_CLIENT_SECRET=\${{env.GOOGLE_CLIENT_SECRET}} \\\\",
  "            --build-arg NEXT_PUBLIC_SITE_URL=\${{env.NEXT_PUBLIC_SITE_URL}} \\\\",
  "            --build-arg NEXTAUTH_SECRET=\${{env.NEXTAUTH_SECRET}} \\\\",
  "            --build-arg TRACE_EXPORTER_URL=\${{env.TRACE_EXPORTER_URL}} \\\\",
  "            --build-arg STRIPE_PRICE_ID=\${{env.STRIPE_PRICE_ID}} \\\\",
  "            --build-arg STRIPE_SECRET_KEY=\${{env.STRIPE_SECRET_KEY}} \\\\",
  "            --build-arg STRIPE_WEBHOOK_SECRET=\${{env.STRIPE_WEBHOOK_SECRET}} \\\\",
  "            .",
  "        env:",
  "          # please set the following environment variables as github secrets",
  "          DATABASE_USER: local",
  "          DATABASE_PASSWORD: 1234",
  "          DATABASE_DB: database",
  "          DATABASE_HOST: host.docker.internal",
  "          DATABASE_PORT: 5432",
  "          DATABASE_SCHEMA: public",
  "          NEXTAUTH_SECRET: TKDdLVjf7cTyTs5oWVpv04senu6fia4RGQbYHRQIR5Q=",
  "          GOOGLE_CLIENT_ID: dummy",
  "          GOOGLE_CLIENT_SECRET: dummy",
  "          TRACE_EXPORTER_URL: \\"\\"",
  "          STRIPE_PRICE_ID: price_1",
  "          STRIPE_SECRET_KEY: pk_test_1",
  "          STRIPE_WEBHOOK_SECRET: whsec_1",
  "      - run: docker run -d -p 3000:3000 app",
  "      - run: |",
  "          until $(curl --output /dev/null --silent --fail \${{env.NEXT_PUBLIC_SITE_URL}}); do",
  "            printf '!'",
  "            sleep 1",
  "          done",
  "        timeout-minutes: 1",
  "  unit-test:",
  "    runs-on: ubuntu-latest",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - run: pnpm test",
  "  e2e-test:",
  "    runs-on: ubuntu-latest",
  "    env:",
  "      NEXTAUTH_SECRET: UfxvOS6HetHOFkL44YTITYgc0DOuOlz5TBp3jkbnZ3w=",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - run: pnpm exec playwright install chromium",
  "      - run: pnpm build:test",
  "      - run: pnpm test:e2e",
  ""
]
`;

exports[`common > should update .gitignore 1`] = `
[
  ".githooks",
  "",
  "node_modules",
  "coverage",
  "",
  "/.next/",
  "",
  ".auth",
  "playwright-report",
  "test-results",
  "",
  ".DS_Store",
  "*.pem",
  "",
  ".env",
  "",
  ".vercel",
  ".claude",
  "",
  "*.tsbuildinfo",
  "next-env.d.ts",
  "",
  "__generated__",
  "",
  ""
]
`;

exports[`common > should update Dockerfile 1`] = `
[
  "FROM node:22.16.0-slim AS base",
  "",
  "ARG DATABASE_USER=''",
  "ARG DATABASE_PASSWORD=''",
  "ARG DATABASE_DB=''",
  "ARG DATABASE_HOST=''",
  "ARG DATABASE_PORT=''",
  "ARG DATABASE_SCHEMA=''",
  "ARG GOOGLE_CLIENT_ID=''",
  "ARG GOOGLE_CLIENT_SECRET=''",
  "ARG NEXT_PUBLIC_SITE_URL=''",
  "ARG NEXTAUTH_SECRET=''",
  "ARG TRACE_EXPORTER_URL=''",
  "ARG STRIPE_PRICE_ID=''",
  "ARG STRIPE_SECRET_KEY=''",
  "ARG STRIPE_WEBHOOK_SECRET=''",
  "",
  "ENV PNPM_HOME=\\"/pnpm\\"",
  "ENV PATH=\\"$PNPM_HOME:$PATH\\"",
  "ENV DATABASE_USER=$DATABASE_USER",
  "ENV DATABASE_PASSWORD=$DATABASE_PASSWORD",
  "ENV DATABASE_DB=$DATABASE_DB",
  "ENV DATABASE_HOST=$DATABASE_HOST",
  "ENV DATABASE_PORT=$DATABASE_PORT",
  "ENV DATABASE_SCHEMA=$DATABASE_SCHEMA",
  "ENV GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID",
  "ENV GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET",
  "ENV NEXT_PUBLIC_SITE_URL=$NEXT_PUBLIC_SITE_URL",
  "ENV NEXTAUTH_SECRET=$NEXTAUTH_SECRET",
  "ENV NEXTAUTH_URL=$NEXT_PUBLIC_SITE_URL",
  "ENV TRACE_EXPORTER_URL=$TRACE_EXPORTER_URL",
  "ENV STRIPE_PRICE_ID=$STRIPE_PRICE_ID",
  "ENV STRIPE_SECRET_KEY=$STRIPE_SECRET_KEY",
  "ENV STRIPE_WEBHOOK_SECRET=$STRIPE_WEBHOOK_SECRET",
  "",
  "COPY . /app",
  "WORKDIR /app",
  "",
  "RUN npm run setup",
  "# for prisma",
  "RUN apt-get update -y && apt-get install -y openssl",
  "",
  "FROM base AS prod-deps",
  "",
  "RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm i --prod --frozen-lockfile",
  "RUN pnpm prisma generate --generator client",
  "",
  "FROM base AS build",
  "",
  "RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm i --frozen-lockfile",
  "RUN pnpm build",
  "",
  "FROM base AS app",
  "",
  "COPY --from=prod-deps /app/node_modules /app/node_modules",
  "COPY --from=build /app/.next /app/.next",
  "",
  "EXPOSE 3000",
  "CMD [\\"pnpm\\", \\"start\\"]",
  ""
]
`;

exports[`common > should update README.md 1`] = `
[
  "## Setup",
  "",
  "\`\`\`sh",
  "# enable corepack",
  "$ npm run setup",
  "# install deps",
  "$ pnpm i",
  "# create \\".env\\" and modify environment variables",
  "$ cp .env.sample .env",
  "\`\`\`",
  "",
  "## Development",
  "",
  "\`\`\`sh",
  "$ pnpm dev",
  "\`\`\`",
  "",
  "### Debugging Stripe",
  "",
  "1. Create a subscription [here](https://dashboard.stripe.com/test/products?active=true&create=product&source=product_list) and get \`price_id\`.",
  "",
  "2. Modify the environment variables. The test API key is [here](https://dashboard.stripe.com/test/apikeys).",
  "",
  "\`\`\`",
  "STRIPE_SECRET_KEY=",
  "STRIPE_WEBHOOK_SECRET=",
  "STRIPE_PRICE_ID=",
  "\`\`\`",
  "",
  "3. [Install stripe CLI](https://docs.stripe.com/stripe-cli) to bypass the webhook.",
  "",
  "4. Execute the following command in another terminal.",
  "",
  "\`\`\`sh",
  "$ stripe listen --forward-to localhost:3000/api/payment/webhook",
  "\`\`\`",
  "",
  "5. After signing in, you can go to the \`http://localhost:3000/me/payment\` page to see how to make a payment.",
  "",
  "## Production",
  "",
  "\`\`\`sh",
  "$ pnpm db:up",
  "$ pnpm build",
  "$ pnpm start",
  "\`\`\`",
  "",
  "### Observability",
  "",
  "This template uses Jaeger as a tracing platform. The local environment doesn't require \`TRACE_EXPORTER_URL\` environment value.",
  "",
  "\`\`\`sh",
  "# open Jaeger",
  "$ open http://localhost:16686/",
  "\`\`\`",
  "",
  "## Test",
  "",
  "### Unit Test",
  "",
  "\`\`\`sh",
  "$ pnpm test",
  "$ pnpm test:watch",
  "\`\`\`",
  "",
  "### E2E Test",
  "",
  "A build task must be executed before running tests to bypass JWT logic.",
  "",
  "\`\`\`sh",
  "# install chrome",
  "$ pnpm exec playwright install chrome",
  "# build using test environments since it needs to change encode/decode functions of next-auth",
  "$ pnpm build:test",
  "",
  "$ pnpm test:e2e",
  "$ pnpm test:e2e:ui",
  "\`\`\`",
  "",
  "## Database",
  "",
  "\`\`\`sh",
  "$ pnpm db:migrate",
  "$ pnpm db:reset",
  "# view the database items",
  "$ pnpm db:studio",
  "\`\`\`",
  "",
  "## Links",
  "",
  "- [Database ER diagram](/prisma/schema/ERD.md)",
  "- [Web App Template](https://hiroppy.github.io/web-app-template/)",
  ""
]
`;

exports[`common > should update compose.yml 1`] = `
[
  "volumes:",
  "  db-data:",
  "",
  "services:",
  "  db:",
  "    image: postgres:17",
  "    ports:",
  "      - \${DATABASE_PORT:-5432}:5432",
  "    environment:",
  "      - POSTGRES_USER=\${DATABASE_USER}",
  "      - POSTGRES_PASSWORD=\${DATABASE_PASSWORD}",
  "      - POSTGRES_DB=\${DATABASE_DB}",
  "    healthcheck:",
  "      test: [\\"CMD-SHELL\\", \\"pg_isready\\"]",
  "      interval: 1s",
  "      timeout: 5s",
  "      retries: 10",
  "  jaeger:",
  "    image: jaegertracing/all-in-one",
  "    ports:",
  "      # https://www.jaegertracing.io/docs/1.6/getting-started/#all-in-one-docker-image",
  "      # frontend",
  "      - 16686:16686",
  "      - 14268",
  "      - 14250",
  "    environment:",
  "      - METRICS_STORAGE_TYPE=prometheus",
  "      - PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR=true",
  "      - COLLECTOR_OTLP_ENABLED=true",
  "  # don't use contrib on prod",
  "  # https://opentelemetry.io/blog/2024/otel-collector-anti-patterns/#3--not-using-the-right-collector-distribution-or-not-building-your-own-distribution",
  "  otel-collector:",
  "    image: otel/opentelemetry-collector-contrib",
  "    command: [\\"--config=/conf/otel-collector-config.yml\\"]",
  "    volumes:",
  "      - ./otel-collector-config.yml:/conf/otel-collector-config.yml",
  "    ports:",
  "      - 13133:13133 # health_check extension",
  "      - 4317:4317 # OTLP gRPC receiver",
  "    depends_on:",
  "      - jaeger",
  ""
]
`;

exports[`common > should update dependencies 1`] = `
{
  "dependencies": [
    "@auth/prisma-adapter",
    "@hookform/resolvers",
    "@next/env",
    "@opentelemetry/exporter-metrics-otlp-grpc",
    "@opentelemetry/exporter-trace-otlp-grpc",
    "@opentelemetry/instrumentation-http",
    "@opentelemetry/resources",
    "@opentelemetry/sdk-metrics",
    "@opentelemetry/sdk-node",
    "@opentelemetry/sdk-trace-base",
    "@opentelemetry/semantic-conventions",
    "@prisma/client",
    "@prisma/instrumentation",
    "clsx",
    "next",
    "next-auth",
    "react",
    "react-dom",
    "react-hook-form",
    "stripe",
    "prisma",
    "zod"
  ],
  "devDependencies": [
    "@axe-core/playwright",
    "@biomejs/biome",
    "@playwright/test",
    "@tailwindcss/postcss",
    "@testing-library/react",
    "@types/node",
    "@types/react",
    "@types/react-dom",
    "@vitejs/plugin-react",
    "jsdom",
    "knip",
    "lefthook",
    "prettier",
    "prisma-erd-generator",
    "tailwindcss",
    "testcontainers",
    "typescript",
    "vitest"
  ]
}
`;

exports[`common > should update e2e/fixtures.ts 1`] = `
[
  "import AxeBuilder from \\"@axe-core/playwright\\";",
  "import { test as base } from \\"@playwright/test\\";",
  "import type { User } from \\"next-auth\\";",
  "import { truncate } from \\"../tests/db.setup\\";",
  "import { generatePrismaClient } from \\"./helpers/prisma\\";",
  "import { registerUserToDB } from \\"./helpers/users\\";",
  "import { MePage } from \\"./models/MePage\\";",
  "import { NotFoundPage } from \\"./models/NotFoundPage\\";",
  "import { SignInPage } from \\"./models/SignInPage\\";",
  "import { TopPage } from \\"./models/TopPage\\";",
  "",
  "export type TestFixtures = {",
  "  topPage: TopPage;",
  "  mePage: MePage;",
  "  signInPage: SignInPage;",
  "  notFoundPage: NotFoundPage;",
  "  storageState: string;",
  "  registerToDB: (user: User) => Promise<void>;",
  "  reset: () => Promise<void>;",
  "  a11y: () => AxeBuilder;",
  "};",
  "",
  "// biome-ignore lint: lint/complexity/noBannedTypes",
  "export type WorkerFixtures = {};",
  "",
  "export const test = base.extend<TestFixtures, WorkerFixtures>({",
  "  topPage: ({ page }, use) => {",
  "    use(new TopPage(page));",
  "  },",
  "  mePage: ({ page }, use) => {",
  "    use(new MePage(page));",
  "  },",
  "  signInPage: ({ page }, use) => {",
  "    use(new SignInPage(page));",
  "  },",
  "  notFoundPage: ({ page }, use) => {",
  "    use(new NotFoundPage(page));",
  "  },",
  "  registerToDB: async ({ page, reset }, use) => {",
  "    await use(async (user: User) => {",
  "      await registerUserToDB(user);",
  "    });",
  "    await reset();",
  "  },",
  "  reset: ({ context }, use) => {",
  "    use(async () => {",
  "      await using db = await generatePrismaClient();",
  "      await Promise.all([truncate(db.prisma), context.clearCookies()]);",
  "    });",
  "  },",
  "  a11y: async ({ page }, use) => {",
  "    const makeAxeBuilder = () =>",
  "      new AxeBuilder({ page })",
  "        .withTags([\\"wcag2a\\", \\"wcag2aa\\", \\"wcag21a\\", \\"wcag21aa\\"])",
  "        // global disabled rules",
  "        .disableRules([\\"meta-viewport\\"]);",
  "",
  "    await use(makeAxeBuilder);",
  "  },",
  "});",
  ""
]
`;

exports[`common > should update e2e/models/TopPage.ts 1`] = `
[
  "import { type Locator, type Page, expect } from \\"@playwright/test\\";",
  "import type { User } from \\"next-auth\\";",
  "import { Base } from \\"./Base\\";",
  "",
  "export class TopPage extends Base {",
  "  textUserStatusLabelLocator: Locator;",
  "  buttonAddItemLocator: Locator;",
  "  buttonDeleteItemsLocator: Locator;",
  "",
  "  constructor(page: Page) {",
  "    super(page);",
  "",
  "    this.textUserStatusLabelLocator = this.page.locator(",
  "      '[aria-label=\\"User status\\"]',",
  "    );",
  "    this.buttonAddItemLocator = this.page.getByRole(\\"link\\", {",
  "      name: \\"Add an item\\",",
  "    });",
  "    this.buttonDeleteItemsLocator = this.page.getByRole(\\"button\\", {",
  "      name: \\"Delete my items\\",",
  "    });",
  "  }",
  "",
  "  async goTo() {",
  "    return await this.page.goto(\\"/\\");",
  "  }",
  "",
  "  async expectUI(state: \\"signIn\\" | \\"signOut\\", user?: User) {",
  "    if (state === \\"signIn\\") {",
  "      await expect(this.textUserStatusLabelLocator).toContainText(",
  "        \`you are signed in as \${user?.name} 😄\`,",
  "      );",
  "      await expect(this.buttonDeleteItemsLocator).toBeVisible();",
  "      await expect(this.buttonAddItemLocator).toBeVisible();",
  "    }",
  "",
  "    if (state === \\"signOut\\") {",
  "      await expect(this.textUserStatusLabelLocator).toContainText(",
  "        \\"you are not signed in 🥲\\",",
  "      );",
  "      await expect(this.buttonDeleteItemsLocator).not.toBeVisible();",
  "      await expect(this.buttonAddItemLocator).not.toBeVisible();",
  "    }",
  "  }",
  "",
  "  async getItems() {",
  "    const items = await this.page",
  "      .getByRole(\\"list\\", { name: \\"items\\" })",
  "      .getByRole(\\"listitem\\")",
  "      .all();",
  "    const res = await Promise.all(",
  "      items.map(async (item) => {",
  "        const img = await item.getByRole(\\"img\\").getAttribute(\\"src\\");",
  "        const title = await item.getByRole(\\"heading\\").innerText();",
  "",
  "        return {",
  "          img,",
  "          title,",
  "        };",
  "      }),",
  "    );",
  "",
  "    return res;",
  "  }",
  "",
  "  async addItem(content: string) {",
  "    expect(await this.buttonAddItemLocator.getAttribute(\\"href\\")).toBe(",
  "      \\"/create\\",",
  "    );",
  "",
  "    await this.buttonAddItemLocator.click();",
  "",
  "    const inputCreateContentLocator = this.page.locator(",
  "      'input[name=\\"content\\"]',",
  "    );",
  "    const inputCreateContentErrorLocator = this.page.locator(",
  "      \`#\${await inputCreateContentLocator.getAttribute(\\"id\\")}-error\`,",
  "    );",
  "",
  "    await inputCreateContentLocator.fill(content);",
  "    await expect(inputCreateContentErrorLocator).not.toBeVisible();",
  "    await this.page.keyboard.press(\\"Enter\\");",
  "",
  "    await this.page.waitForLoadState(\\"networkidle\\");",
  "    await this.page.goto(\\"/\\");",
  "  }",
  "",
  "  async deleteAllItems() {",
  "    await this.buttonDeleteItemsLocator.click();",
  "    await this.page.waitForLoadState(\\"networkidle\\");",
  "  }",
  "",
  "  async expectItems(",
  "    expected: {",
  "      img: string;",
  "      title: string;",
  "    }[],",
  "  ) {",
  "    expect(await this.getItems()).toMatchObject(expected);",
  "  }",
  "}",
  ""
]
`;

exports[`common > should update env.ts 1`] = `
[
  "import { loadEnvConfig } from \\"@next/env\\";",
  "import { z } from \\"zod\\";",
  "",
  "const staticEnv = z.object({",
  "  NODE_ENV: z",
  "    .union([",
  "      z.literal(\\"development\\"),",
  "      z.literal(\\"test\\"),",
  "      z.literal(\\"production\\"),",
  "    ])",
  "    .default(\\"development\\"),",
  "",
  "  // for client and server",
  "  NEXT_PUBLIC_SITE_URL: z.string().url(),",
  "",
  "  // for server",
  "  DATABASE_USER: z.string().min(1),",
  "  DATABASE_PASSWORD: z.string().min(1),",
  "  DATABASE_DB: z.string().min(1),",
  "  DATABASE_HOST: z.string().min(1),",
  "  DATABASE_PORT: z.coerce.number().min(1),",
  "  DATABASE_SCHEMA: z.string().min(1),",
  "",
  "  GOOGLE_CLIENT_ID: z.string().min(1),",
  "  GOOGLE_CLIENT_SECRET: z.string().min(1),",
  "",
  "  NEXTAUTH_URL: z.string().min(1),",
  "  NEXTAUTH_SECRET: z.string().min(1),",
  "",
  "  TRACE_EXPORTER_URL: z.string().url().optional().or(z.literal(\\"\\")),",
  "",
  "  STRIPE_PRICE_ID: z.string().min(1),",
  "  STRIPE_SECRET_KEY: z.string().min(1),",
  "  STRIPE_WEBHOOK_SECRET: z.string().min(1),",
  "});",
  "",
  "const runtimeEnv = z.object({});",
  "",
  "export type Schema = z.infer<typeof schema>;",
  "",
  "const schema = z.intersection(staticEnv, runtimeEnv);",
  "",
  "export function config(kind: \\"static\\" | \\"runtime\\" = \\"static\\") {",
  "  const { combinedEnv } = loadEnvConfig(process.cwd());",
  "  const res =",
  "    kind === \\"static\\"",
  "      ? staticEnv.safeParse(combinedEnv)",
  "      : runtimeEnv.safeParse(combinedEnv);",
  "",
  "  if (res.error) {",
  "    console.error(\\"\\\\x1b[31m%s\\\\x1b[0m\\", \\"[Errors] environment variables\\");",
  "    console.error(JSON.stringify(res.error.errors, null, 2));",
  "    process.exit(1);",
  "  }",
  "}",
  ""
]
`;

exports[`common > should update knip.config.ts 1`] = `
[
  "import type { KnipConfig } from \\"knip\\";",
  "",
  "const config: KnipConfig = {",
  "  ignore: [\\"tests/build.mjs\\", \\"prisma.config.ts\\"],",
  "  playwright: {",
  "    config: [\\"playwright.config.ts\\"],",
  "    entry: [\\"e2e/**/*.ts\\", \\"tests/**/*.ts\\"],",
  "  },",
  "  vitest: {",
  "    entry: [\\"src/**/*.test.ts\\", \\"tests/**/*.ts\\"],",
  "  },",
  "  ignoreDependencies: [\\"postcss\\", \\"tailwindcss\\", \\"prisma-erd-generator\\"],",
  "  ignoreBinaries: [],",
  "};",
  "",
  "export default config;",
  ""
]
`;

exports[`common > should update next.config.ts 1`] = `
[
  "import type { NextConfig } from \\"next\\";",
  "import { config } from \\"./env\\";",
  "",
  "config();",
  "",
  "const nextConfig: NextConfig = {",
  "  async headers() {",
  "    return [",
  "      {",
  "        source: \\"/(.*?)\\",",
  "        headers: [",
  "          {",
  "            key: \\"X-Frame-Options\\",",
  "            value: \\"DENY\\",",
  "          },",
  "          {",
  "            key: \\"X-DNS-Prefetch-Control\\",",
  "            value: \\"on\\",",
  "          },",
  "          {",
  "            key: \\"X-XSS-Protection\\",",
  "            value: \\"1; mode=block\\",",
  "          },",
  "          {",
  "            key: \\"X-Content-Type-Options\\",",
  "            value: \\"nosniff\\",",
  "          },",
  "          {",
  "            key: \\"Referrer-Policy\\",",
  "            value: \\"origin-when-cross-origin\\",",
  "          },",
  "        ],",
  "      },",
  "    ];",
  "  },",
  "  images: {",
  "    remotePatterns: [",
  "      {",
  "        protocol: \\"https\\",",
  "        hostname: \\"lh3.googleusercontent.com\\",",
  "      },",
  "    ],",
  "  },",
  "  experimental: {",
  "    typedRoutes: true,",
  "    authInterrupts: true,",
  "  },",
  "  webpack: (config, { isServer }) => {",
  "    if (isServer) {",
  "      // https://github.com/open-telemetry/opentelemetry-js/issues/4173",
  "      config.ignoreWarnings = [{ module: /opentelemetry/ }];",
  "    }",
  "    return config;",
  "  },",
  "};",
  "",
  "export default nextConfig;",
  ""
]
`;

exports[`common > should update prisma/schema/user.prisma 1`] = `
[
  "enum Role {",
  "  USER",
  "  ADMIN",
  "}",
  "",
  "// https://authjs.dev/getting-started/adapters/prisma#schema",
  "model Account {",
  "  id                String   @id @default(cuid())",
  "  userId            String   @map(\\"user_id\\")",
  "  type              String",
  "  provider          String",
  "  providerAccountId String   @map(\\"provider_account_id\\")",
  "  refresh_token     String?  @db.Text",
  "  access_token      String?  @db.Text",
  "  expires_at        Int?",
  "  token_type        String?",
  "  scope             String?",
  "  id_token          String?  @db.Text",
  "  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)",
  "  createdAt         DateTime @default(now()) @map(\\"created_at\\")",
  "  updatedAt         DateTime @updatedAt @map(\\"updated_at\\")",
  "",
  "  @@unique([provider, providerAccountId])",
  "  @@map(\\"accounts\\")",
  "}",
  "",
  "model User {",
  "  id            String         @id @default(cuid())",
  "  name          String?",
  "  email         String?        @unique",
  "  emailVerified DateTime?      @map(\\"email_verified\\")",
  "  image         String?",
  "  accounts      Account[]",
  "  createdAt     DateTime       @default(now()) @map(\\"created_at\\")",
  "  updatedAt     DateTime       @updatedAt @map(\\"updated_at\\")",
  "  // https://authjs.dev/guides/basics/role-based-access-control",
  "  role          Role           @default(USER)",
  "  items         Item[]",
  "  stripeId      String?        @unique @map(\\"stripe_id\\") // cus_XXXX",
  "  subscriptions Subscription[]",
  "",
  "  @@map(\\"users\\")",
  "}",
  "",
  "model Subscription {",
  "  id                String    @id @default(cuid())",
  "  subscriptionId    String    @unique @map(\\"subscription_id\\") // sub_XXXX",
  "  status            String",
  "  currentPeriodEnd  DateTime? @map(\\"current_period_end\\")",
  "  cancelAtPeriodEnd Boolean   @default(false) @map(\\"cancel_at_period_end\\")",
  "  createdAt         DateTime  @default(now()) @map(\\"created_at\\")",
  "  updatedAt         DateTime  @updatedAt @map(\\"updated_at\\")",
  "  userId            String    @map(\\"user_id\\")",
  "  user              User      @relation(fields: [userId], references: [id])",
  "",
  "  @@map(\\"subscriptions\\")",
  "}",
  ""
]
`;

exports[`common > should update src/app/(public)/page.tsx 1`] = `
[
  "import type { Route } from \\"next\\";",
  "import Image from \\"next/image\\";",
  "import Link from \\"next/link\\";",
  "import { Suspense } from \\"react\\";",
  "import { getSessionOrReject } from \\"../_actions/auth\\";",
  "import { deleteAll } from \\"../_actions/items\\";",
  "import { prisma } from \\"../_clients/prisma\\";",
  "import { Button } from \\"../_components/Button\\";",
  "import { format } from \\"../_utils/date\\";",
  "",
  "export default async function Page() {",
  "  return (",
  "    <div className=\\"space-y-5\\">",
  "      <Suspense fallback={<p>loading ...</p>}>",
  "        <Status />",
  "      </Suspense>",
  "      <Suspense fallback={<p>loading ...</p>}>",
  "        <List />",
  "      </Suspense>",
  "    </div>",
  "  );",
  "}",
  "",
  "async function Status() {",
  "  const session = await getSessionOrReject();",
  "",
  "  return (",
  "    <div className=\\"flex justify-between gap-3 flex-col md:flex-row md:items-center\\">",
  "      <p className=\\"text-gray-300\\" aria-label=\\"User status\\">",
  "        {session?.data?.user",
  "          ? \`you are signed in as \${session.data.user.name} 😄\`",
  "          : \\"you are not signed in 🥲\\"}",
  "      </p>",
  "      {session?.data?.user && (",
  "        <div className=\\"flex items-center gap-4\\">",
  "          <Link href={\\"/create\\" as Route} scroll={false}>",
  "            <Button className=\\"bg-blue-600\\">Add an item</Button>",
  "          </Link>",
  "          <form action={deleteAll}>",
  "            <Button type=\\"submit\\" className=\\"bg-orange-800  text-gray-100\\">",
  "              Delete my items",
  "            </Button>",
  "          </form>",
  "        </div>",
  "      )}",
  "    </div>",
  "  );",
  "}",
  "",
  "async function List() {",
  "  const data = await prisma.item.findMany({",
  "    include: {",
  "      user: true,",
  "    },",
  "    orderBy: {",
  "      createdAt: \\"desc\\",",
  "    },",
  "  });",
  "",
  "  return (",
  "    <ul className=\\"space-y-4\\" aria-label=\\"items\\">",
  "      {data.map(({ id, content, createdAt, user }) => (",
  "        <li",
  "          key={id}",
  "          className=\\"border border-gray-600 p-4 flex justify-between items-start rounded-md\\"",
  "        >",
  "          <div className=\\"flex justify-center gap-4 items-center\\">",
  "            {user.image && (",
  "              <Image",
  "                alt={user.name ?? \\"no name\\"}",
  "                src={user.image}",
  "                width={56}",
  "                height={56}",
  "                className=\\"rounded-full border-2 border-gray-300\\"",
  "                priority",
  "              />",
  "            )}",
  "            <h2",
  "              className=\\"font-semibold md:text-xl break-all\\"",
  "              title=\\"memo title\\"",
  "            >",
  "              {content}",
  "            </h2>",
  "          </div>",
  "          <span className=\\"text-sm text-gray-300\\">{format(createdAt)}</span>",
  "        </li>",
  "      ))}",
  "    </ul>",
  "  );",
  "}",
  ""
]
`;

exports[`common > should update src/app/layout.tsx 1`] = `
[
  "import { clsx } from \\"clsx\\";",
  "import type { Metadata, Viewport } from \\"next\\";",
  "import { Inter } from \\"next/font/google\\";",
  "import type { PropsWithChildren, ReactNode } from \\"react\\";",
  "import { Footer } from \\"./_components/Footer\\";",
  "import { Header } from \\"./_components/Header\\";",
  "import \\"./globals.css\\";",
  "",
  "const inter = Inter({ subsets: [\\"latin\\"] });",
  "",
  "export const metadata: Metadata = {",
  "  metadataBase: new URL(process.env.NEXT_PUBLIC_SITE_URL),",
  "  title: \\"web app template\\",",
  "  description: \\"😸\\",",
  "};",
  "",
  "export const viewport: Viewport = {",
  "  // for mobile",
  "  maximumScale: 1,",
  "};",
  "",
  "type Props = PropsWithChildren<{",
  "  dialog: ReactNode;",
  "}>;",
  "",
  "export default function Layout({ dialog, children }: Props) {",
  "  return (",
  "    <html lang=\\"en\\">",
  "      <body",
  "        className={clsx(",
  "          inter.className,",
  "          \\"bg-gray-700 text-gray-200 min-h-screen flex flex-col\\",",
  "          // for dialog",
  "          \\"has-[dialog[open]]:overflow-hidden\\",",
  "        )}",
  "      >",
  "        <Header />",
  "        <main className=\\"flex-1\\">{children}</main>",
  "        <Footer />",
  "        {dialog}",
  "      </body>",
  "    </html>",
  "  );",
  "}",
  ""
]
`;

exports[`common > should update src/middleware.test.ts 1`] = `
[
  "import { beforeEach } from \\"node:test\\";",
  "import type { NextAuthResult } from \\"next-auth\\";",
  "import type { AppRouteHandlerFn } from \\"next/dist/server/route-modules/app-route/module\\";",
  "import {",
  "  getRewrittenUrl,",
  "  isRewrite,",
  "  unstable_doesMiddlewareMatch,",
  "} from \\"next/experimental/testing/server.js\\";",
  "import { NextRequest, type NextResponse } from \\"next/server\\";",
  "import { describe, expect, test, vi } from \\"vitest\\";",
  "import nextConfig from \\"../next.config\\";",
  "import middleware, { config } from \\"./middleware\\";",
  "",
  "type NextAuthRequest = Parameters<Parameters<NextAuthResult[\\"auth\\"]>[0]>[0];",
  "",
  "describe(\\"middleware\\", () => {",
  "  beforeEach(() => {",
  "    vi.mock(\\"next-auth\\", async (actual) => ({",
  "      ...(await actual<typeof import(\\"next-auth\\")>()),",
  "      default: () => ({",
  "        auth: (",
  "          fn: (",
  "            req: NextAuthRequest,",
  "            ctx: AppRouteHandlerFn,",
  "          ) => Promise<NextResponse>,",
  "        ) => fn,",
  "      }),",
  "    }));",
  "  });",
  "",
  "  test(\\"should execute middleware when paths are specified by config\\", () => {",
  "    const fixtures: [string, boolean][] = [",
  "      [\\"/\\", false],",
  "      [\\"/me\\", true],",
  "    ];",
  "",
  "    for (const [url, expected] of fixtures) {",
  "      expect(",
  "        unstable_doesMiddlewareMatch({",
  "          config,",
  "          nextConfig,",
  "          url,",
  "        }),",
  "      ).toEqual(expected);",
  "    }",
  "  });",
  "",
  "  test(\\"should route /signin to when fallback\\", async () => {",
  "    const req = new NextRequest(\\"http://localhost:3000\\");",
  "    const res = (await middleware(req, {})) as NextResponse;",
  "",
  "    expect(isRewrite(res)).toEqual(true);",
  "    expect(getRewrittenUrl(res)).toEqual(\\"http://localhost:3000/signin\\");",
  "  });",
  "",
  "  test(\\"should accept only users having role of user\\", async () => {",
  "    const req = {",
  "      auth: {",
  "        user: {",
  "          role: \\"USER\\",",
  "        },",
  "        expires: \\"expires\\",",
  "      },",
  "    } as NextAuthRequest;",
  "",
  "    const res = (await middleware(req, {})) as NextResponse;",
  "",
  "    expect(isRewrite(res)).toEqual(false);",
  "    expect(getRewrittenUrl(res)).toEqual(null);",
  "  });",
  "});",
  ""
]
`;

exports[`common > should update src/middleware.ts 1`] = `
[
  "import NextAuth from \\"next-auth\\";",
  "import type { MiddlewareSourceConfig } from \\"next/experimental/testing/server\\";",
  "import { NextResponse } from \\"next/server\\";",
  "import { config as authConfig } from \\"./app/_clients/nextAuthConfig\\";",
  "",
  "const { auth } = NextAuth(authConfig);",
  "",
  "export const config: MiddlewareSourceConfig = {",
  "  matcher: [\\"/me(.*)\\"],",
  "};",
  "",
  "export default auth(async function middleware(req) {",
  "  if (req.auth?.user.role === \\"USER\\") {",
  "    return NextResponse.next();",
  "  }",
  "",
  "  return NextResponse.rewrite(new URL(\\"/signin\\", req.url));",
  "});",
  ""
]
`;
