exports[`no-e2e > should put files 1`] = `
[
  "internal-tests-output-no-e2e/.dockerignore",
  "internal-tests-output-no-e2e/.editorconfig",
  "internal-tests-output-no-e2e/.env",
  "internal-tests-output-no-e2e/.env.sample",
  "internal-tests-output-no-e2e/.env.test",
  "internal-tests-output-no-e2e/.github/actions/setup-db/action.yml",
  "internal-tests-output-no-e2e/.github/actions/setup-node/action.yml",
  "internal-tests-output-no-e2e/.github/copilot-instructions.md",
  "internal-tests-output-no-e2e/.github/workflows/ci.yml",
  "internal-tests-output-no-e2e/.github/workflows/migration.yml",
  "internal-tests-output-no-e2e/.gitignore",
  "internal-tests-output-no-e2e/.node-version",
  "internal-tests-output-no-e2e/.npmrc",
  "internal-tests-output-no-e2e/.vscode/extensions.json",
  "internal-tests-output-no-e2e/.vscode/settings.json",
  "internal-tests-output-no-e2e/Dockerfile",
  "internal-tests-output-no-e2e/README.md",
  "internal-tests-output-no-e2e/biome.json",
  "internal-tests-output-no-e2e/compose.yml",
  "internal-tests-output-no-e2e/env.ts",
  "internal-tests-output-no-e2e/knip.config.ts",
  "internal-tests-output-no-e2e/lefthook.yml",
  "internal-tests-output-no-e2e/next.config.ts",
  "internal-tests-output-no-e2e/otel-collector-config.yml",
  "internal-tests-output-no-e2e/package.json",
  "internal-tests-output-no-e2e/pnpm-lock.yaml",
  "internal-tests-output-no-e2e/postcss.config.mjs",
  "internal-tests-output-no-e2e/prisma/migrations/migration_lock.toml",
  "internal-tests-output-no-e2e/prisma/schema/ERD.md",
  "internal-tests-output-no-e2e/prisma/schema/item.prisma",
  "internal-tests-output-no-e2e/prisma/schema/schema.prisma",
  "internal-tests-output-no-e2e/prisma/schema/user.prisma",
  "internal-tests-output-no-e2e/public/.gitkeep",
  "internal-tests-output-no-e2e/renovate.json",
  "internal-tests-output-no-e2e/tests/build.mjs",
  "internal-tests-output-no-e2e/tests/db.setup.ts",
  "internal-tests-output-no-e2e/tests/vitest.helper.ts",
  "internal-tests-output-no-e2e/tests/vitest.setup.ts",
  "internal-tests-output-no-e2e/tsconfig.json",
  "internal-tests-output-no-e2e/vitest.config.ts",
  "mocked/migration.sql"
]
`;

exports[`no-e2e > should update .github/workflows/ci.yml 1`] = `
[
  "name: ci",
  "",
  "on:",
  "  pull_request:",
  "    branches:",
  "      - main",
  "    paths:",
  "      - .github/workflows/ci.yml",
  "      - package.json",
  "      - src/**",
  "      - Dockerfile",
  "  push:",
  "    branches:",
  "      - main",
  "    paths:",
  "      - .github/workflows/ci.yml",
  "      - package.json",
  "      - src/**",
  "      - Dockerfile",
  "",
  "jobs:",
  "  lint:",
  "    runs-on: ubuntu-latest",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - run: pnpm lint",
  "      - run: npx biome check . && npx prettier --check './**/*.{md,yml}'",
  "  build:",
  "    runs-on: ubuntu-latest",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - uses: ./.github/actions/setup-db",
  "      - run: pnpm build",
  "  build-docker:",
  "    runs-on: ubuntu-latest",
  "    env:",
  "      NEXT_PUBLIC_SITE_URL: http://localhost:3000",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - uses: ./.github/actions/setup-db",
  "      - run: |",
  "          docker build \\\\",
  "            -t app \\\\",
  "            -f Dockerfile \\\\",
  "            --add-host=host.docker.internal:host-gateway \\\\",
  "            --build-arg DATABASE_USER=\${{env.DATABASE_USER}} \\\\",
  "            --build-arg DATABASE_PASSWORD=\${{env.DATABASE_PASSWORD}} \\\\",
  "            --build-arg DATABASE_DB=\${{env.DATABASE_DB}} \\\\",
  "            --build-arg DATABASE_HOST=\${{env.DATABASE_HOST}} \\\\",
  "            --build-arg DATABASE_PORT=\${{env.DATABASE_PORT}} \\\\",
  "            --build-arg DATABASE_SCHEMA=\${{env.DATABASE_SCHEMA}} \\\\",
  "            --build-arg GOOGLE_CLIENT_ID=\${{env.GOOGLE_CLIENT_ID}} \\\\",
  "            --build-arg GOOGLE_CLIENT_SECRET=\${{env.GOOGLE_CLIENT_SECRET}} \\\\",
  "            --build-arg NEXT_PUBLIC_SITE_URL=\${{env.NEXT_PUBLIC_SITE_URL}} \\\\",
  "            --build-arg NEXTAUTH_SECRET=\${{env.NEXTAUTH_SECRET}} \\\\",
  "            --build-arg TRACE_EXPORTER_URL=\${{env.TRACE_EXPORTER_URL}} \\\\",
  "            --build-arg STRIPE_PRICE_ID=\${{env.STRIPE_PRICE_ID}} \\\\",
  "            --build-arg STRIPE_SECRET_KEY=\${{env.STRIPE_SECRET_KEY}} \\\\",
  "            --build-arg STRIPE_WEBHOOK_SECRET=\${{env.STRIPE_WEBHOOK_SECRET}} \\\\",
  "            .",
  "        env:",
  "          # please set the following environment variables as github secrets",
  "          DATABASE_USER: local",
  "          DATABASE_PASSWORD: 1234",
  "          DATABASE_DB: database",
  "          DATABASE_HOST: host.docker.internal",
  "          DATABASE_PORT: 5432",
  "          DATABASE_SCHEMA: public",
  "          NEXTAUTH_SECRET: TKDdLVjf7cTyTs5oWVpv04senu6fia4RGQbYHRQIR5Q=",
  "          GOOGLE_CLIENT_ID: dummy",
  "          GOOGLE_CLIENT_SECRET: dummy",
  "          TRACE_EXPORTER_URL: \\"\\"",
  "          STRIPE_PRICE_ID: price_1",
  "          STRIPE_SECRET_KEY: pk_test_1",
  "          STRIPE_WEBHOOK_SECRET: whsec_1",
  "      - run: docker run -d -p 3000:3000 app",
  "      - run: |",
  "          until $(curl --output /dev/null --silent --fail \${{env.NEXT_PUBLIC_SITE_URL}}); do",
  "            printf '!'",
  "            sleep 1",
  "          done",
  "        timeout-minutes: 1",
  "  unit-test:",
  "    runs-on: ubuntu-latest",
  "    steps:",
  "      - uses: actions/checkout@v4",
  "      - uses: ./.github/actions/setup-node",
  "      - uses: ./.github/actions/setup-db",
  "        with:",
  "          run_db: false",
  "      - run: pnpm test",
  ""
]
`;

exports[`no-e2e > should update .gitignore 1`] = `
[
  ".githooks",
  "",
  "node_modules",
  "coverage",
  "",
  "/.next/",
  "",
  "",
  ".DS_Store",
  "*.pem",
  "",
  ".env",
  "",
  ".vercel",
  "",
  "*.tsbuildinfo",
  "next-env.d.ts",
  "",
  ""
]
`;

exports[`no-e2e > should update README.md 1`] = `
[
  "## Setup",
  "",
  "\`\`\`sh",
  "# enable corepack",
  "$ npm run setup",
  "# install deps",
  "$ pnpm i",
  "# create \\".env\\" and modify environment variables",
  "$ cp .env.sample .env",
  "\`\`\`",
  "",
  "## Development",
  "",
  "\`\`\`sh",
  "$ pnpm dev",
  "\`\`\`",
  "",
  "### Debugging Stripe",
  "",
  "1. Create a subscription [here](https://dashboard.stripe.com/test/products?active=true&create=product&source=product_list) and get \`price_id\`.",
  "",
  "2. Modify the environment variables. The test API key is [here](https://dashboard.stripe.com/test/apikeys).",
  "",
  "\`\`\`",
  "STRIPE_SECRET_KEY=",
  "STRIPE_WEBHOOK_SECRET=",
  "STRIPE_PRICE_ID=",
  "\`\`\`",
  "",
  "3. [Install stripe CLI](https://docs.stripe.com/stripe-cli) to bypass the webhook.",
  "",
  "4. Execute the following command in another terminal.",
  "",
  "\`\`\`sh",
  "$ stripe listen --forward-to localhost:3000/api/payment/webhook",
  "\`\`\`",
  "",
  "5. After signing in, you can go to the \`http://localhost:3000/me/payment\` page to see how to make a payment.",
  "",
  "## Production",
  "",
  "\`\`\`sh",
  "$ pnpm db:up",
  "$ pnpm build",
  "$ pnpm start",
  "\`\`\`",
  "",
  "### Observability",
  "",
  "This template uses Jaeger as a tracing platform. The local environment doesn't require \`TRACE_EXPORTER_URL\` environment value.",
  "",
  "\`\`\`sh",
  "# open Jaeger",
  "$ open http://localhost:16686/",
  "\`\`\`",
  "",
  "## Test",
  "",
  "### Unit Test",
  "",
  "\`\`\`sh",
  "$ pnpm test",
  "$ pnpm test:watch",
  "\`\`\`",
  "",
  "## Database",
  "",
  "\`\`\`sh",
  "$ pnpm db:migrate",
  "$ pnpm db:reset",
  "# view the database items",
  "$ pnpm db:studio",
  "\`\`\`",
  "",
  "## Links",
  "",
  "- [Database ER diagram](/prisma/ERD.md)",
  "- [Web App Template](https://hiroppy.github.io/web-app-template/)",
  ""
]
`;

exports[`no-e2e > should update dependencies 1`] = `
{
  "dependencies": [
    "@auth/prisma-adapter",
    "@hookform/resolvers",
    "@opentelemetry/exporter-metrics-otlp-grpc",
    "@opentelemetry/exporter-trace-otlp-grpc",
    "@opentelemetry/instrumentation-http",
    "@opentelemetry/resources",
    "@opentelemetry/sdk-metrics",
    "@opentelemetry/sdk-node",
    "@opentelemetry/sdk-trace-base",
    "@opentelemetry/semantic-conventions",
    "@prisma/client",
    "@prisma/instrumentation",
    "clsx",
    "next",
    "next-auth",
    "prisma",
    "react",
    "react-dom",
    "react-hook-form",
    "stripe",
    "zod"
  ],
  "devDependencies": [
    "@biomejs/biome",
    "@next/env",
    "@tailwindcss/postcss",
    "@testing-library/react",
    "@types/node",
    "@types/react",
    "@types/react-dom",
    "@vitejs/plugin-react",
    "jsdom",
    "knip",
    "lefthook",
    "prettier",
    "prisma-erd-generator",
    "tailwindcss",
    "testcontainers",
    "typescript",
    "vitest"
  ]
}
`;

exports[`no-e2e > should update npm scripts 1`] = `
[
  "setup",
  "dev",
  "start",
  "build",
  "test",
  "test:watch",
  "db:up",
  "db:migrate",
  "db:reset",
  "db:deploy",
  "db:studio",
  "generate:client",
  "lint",
  "fmt"
]
`;
