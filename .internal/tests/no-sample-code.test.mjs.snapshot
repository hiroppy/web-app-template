exports[`no-sample-code > should put files 1`] = `
[
  "internal-tests-output-no-sample-code/.dockerignore",
  "internal-tests-output-no-sample-code/.editorconfig",
  "internal-tests-output-no-sample-code/.env",
  "internal-tests-output-no-sample-code/.env.sample",
  "internal-tests-output-no-sample-code/.env.test",
  "internal-tests-output-no-sample-code/.github/actions/setup-db/action.yml",
  "internal-tests-output-no-sample-code/.github/actions/setup-node/action.yml",
  "internal-tests-output-no-sample-code/.github/copilot-instructions.md",
  "internal-tests-output-no-sample-code/.github/workflows/ci.yml",
  "internal-tests-output-no-sample-code/.gitignore",
  "internal-tests-output-no-sample-code/.node-version",
  "internal-tests-output-no-sample-code/.npmrc",
  "internal-tests-output-no-sample-code/.vscode/extensions.json",
  "internal-tests-output-no-sample-code/.vscode/settings.json",
  "internal-tests-output-no-sample-code/CLAUDE.md",
  "internal-tests-output-no-sample-code/Dockerfile",
  "internal-tests-output-no-sample-code/README.md",
  "internal-tests-output-no-sample-code/biome.json",
  "internal-tests-output-no-sample-code/compose.yml",
  "internal-tests-output-no-sample-code/e2e/a11y/mePage.test.ts",
  "internal-tests-output-no-sample-code/e2e/a11y/notFoundPage.test.ts",
  "internal-tests-output-no-sample-code/e2e/a11y/signInPage.test.ts",
  "internal-tests-output-no-sample-code/e2e/a11y/topPage.test.ts",
  "internal-tests-output-no-sample-code/e2e/dummyUsers.ts",
  "internal-tests-output-no-sample-code/e2e/fixtures.ts",
  "internal-tests-output-no-sample-code/e2e/globalSetup.ts",
  "internal-tests-output-no-sample-code/e2e/globalTeardown.ts",
  "internal-tests-output-no-sample-code/e2e/globals.d.ts",
  "internal-tests-output-no-sample-code/e2e/helpers/prisma.ts",
  "internal-tests-output-no-sample-code/e2e/helpers/users.ts",
  "internal-tests-output-no-sample-code/e2e/integrations/auth.test.ts",
  "internal-tests-output-no-sample-code/e2e/integrations/user.test.ts",
  "internal-tests-output-no-sample-code/e2e/models/Base.ts",
  "internal-tests-output-no-sample-code/e2e/models/MePage.ts",
  "internal-tests-output-no-sample-code/e2e/models/NotFoundPage.ts",
  "internal-tests-output-no-sample-code/e2e/models/SignInPage.ts",
  "internal-tests-output-no-sample-code/e2e/models/TopPage.ts",
  "internal-tests-output-no-sample-code/e2e/setup/auth.ts",
  "internal-tests-output-no-sample-code/env.ts",
  "internal-tests-output-no-sample-code/knip.config.ts",
  "internal-tests-output-no-sample-code/lefthook.yml",
  "internal-tests-output-no-sample-code/next.config.ts",
  "internal-tests-output-no-sample-code/otel-collector-config.yml",
  "internal-tests-output-no-sample-code/package.json",
  "internal-tests-output-no-sample-code/playwright.config.ts",
  "internal-tests-output-no-sample-code/pnpm-lock.yaml",
  "internal-tests-output-no-sample-code/pnpm-workspace.yaml",
  "internal-tests-output-no-sample-code/postcss.config.mjs",
  "internal-tests-output-no-sample-code/prisma/migrations/migration_lock.toml",
  "internal-tests-output-no-sample-code/prisma/schema/schema.prisma",
  "internal-tests-output-no-sample-code/prisma/schema/user.prisma",
  "internal-tests-output-no-sample-code/public/.gitkeep",
  "internal-tests-output-no-sample-code/renovate.json",
  "internal-tests-output-no-sample-code/src/app/(private)/layout.tsx",
  "internal-tests-output-no-sample-code/src/app/(private)/me/_components/UpdateMyInfo.tsx",
  "internal-tests-output-no-sample-code/src/app/(private)/me/page.tsx",
  "internal-tests-output-no-sample-code/src/app/(private)/me/payment/page.tsx",
  "internal-tests-output-no-sample-code/src/app/(public)/layout.tsx",
  "internal-tests-output-no-sample-code/src/app/(public)/page.tsx",
  "internal-tests-output-no-sample-code/src/app/(public)/signin/page.tsx",
  "internal-tests-output-no-sample-code/src/app/_actions/auth.test.ts",
  "internal-tests-output-no-sample-code/src/app/_actions/auth.ts",
  "internal-tests-output-no-sample-code/src/app/_actions/payment.test.ts",
  "internal-tests-output-no-sample-code/src/app/_actions/payment.ts",
  "internal-tests-output-no-sample-code/src/app/_actions/types.ts",
  "internal-tests-output-no-sample-code/src/app/_actions/users.test.ts",
  "internal-tests-output-no-sample-code/src/app/_actions/users.ts",
  "internal-tests-output-no-sample-code/src/app/_clients/nextAuth.ts",
  "internal-tests-output-no-sample-code/src/app/_clients/nextAuthConfig.ts",
  "internal-tests-output-no-sample-code/src/app/_clients/prisma.ts",
  "internal-tests-output-no-sample-code/src/app/_clients/stripe.ts",
  "internal-tests-output-no-sample-code/src/app/_components/Button.tsx",
  "internal-tests-output-no-sample-code/src/app/_components/Container.tsx",
  "internal-tests-output-no-sample-code/src/app/_components/ErrorPageTemplate.tsx",
  "internal-tests-output-no-sample-code/src/app/_components/Footer.tsx",
  "internal-tests-output-no-sample-code/src/app/_components/FormBox.tsx",
  "internal-tests-output-no-sample-code/src/app/_components/Header.tsx",
  "internal-tests-output-no-sample-code/src/app/_components/Input.tsx",
  "internal-tests-output-no-sample-code/src/app/_components/Payment.tsx",
  "internal-tests-output-no-sample-code/src/app/_components/PaymentButton.tsx",
  "internal-tests-output-no-sample-code/src/app/_components/SignInButton.tsx",
  "internal-tests-output-no-sample-code/src/app/_components/SignOutButton.tsx",
  "internal-tests-output-no-sample-code/src/app/_hooks/useFormId.test.ts",
  "internal-tests-output-no-sample-code/src/app/_hooks/useFormId.ts",
  "internal-tests-output-no-sample-code/src/app/_schemas/users.test.ts",
  "internal-tests-output-no-sample-code/src/app/_schemas/users.ts",
  "internal-tests-output-no-sample-code/src/app/_utils/date.test.ts",
  "internal-tests-output-no-sample-code/src/app/_utils/date.ts",
  "internal-tests-output-no-sample-code/src/app/_utils/db.test.ts",
  "internal-tests-output-no-sample-code/src/app/_utils/db.ts",
  "internal-tests-output-no-sample-code/src/app/_utils/payment.test.ts",
  "internal-tests-output-no-sample-code/src/app/_utils/payment.ts",
  "internal-tests-output-no-sample-code/src/app/_utils/zod.test.ts",
  "internal-tests-output-no-sample-code/src/app/_utils/zod.ts",
  "internal-tests-output-no-sample-code/src/app/api/auth/[...nextauth]/route.ts",
  "internal-tests-output-no-sample-code/src/app/api/health/route.test.ts",
  "internal-tests-output-no-sample-code/src/app/api/health/route.ts",
  "internal-tests-output-no-sample-code/src/app/api/payment/success/route.test.ts",
  "internal-tests-output-no-sample-code/src/app/api/payment/success/route.ts",
  "internal-tests-output-no-sample-code/src/app/api/payment/webhook/route.test.ts",
  "internal-tests-output-no-sample-code/src/app/api/payment/webhook/route.ts",
  "internal-tests-output-no-sample-code/src/app/error.tsx",
  "internal-tests-output-no-sample-code/src/app/favicon.ico",
  "internal-tests-output-no-sample-code/src/app/global-error.tsx",
  "internal-tests-output-no-sample-code/src/app/globals.css",
  "internal-tests-output-no-sample-code/src/app/globals.d.ts",
  "internal-tests-output-no-sample-code/src/app/layout.tsx",
  "internal-tests-output-no-sample-code/src/app/not-found.tsx",
  "internal-tests-output-no-sample-code/src/app/robots.txt",
  "internal-tests-output-no-sample-code/src/instrumentation.ts",
  "internal-tests-output-no-sample-code/src/middleware.test.ts",
  "internal-tests-output-no-sample-code/src/middleware.ts",
  "internal-tests-output-no-sample-code/src/otel/node.ts",
  "internal-tests-output-no-sample-code/tests/build.mjs",
  "internal-tests-output-no-sample-code/tests/db.setup.ts",
  "internal-tests-output-no-sample-code/tests/vitest.helper.ts",
  "internal-tests-output-no-sample-code/tests/vitest.setup.ts",
  "internal-tests-output-no-sample-code/tsconfig.json",
  "internal-tests-output-no-sample-code/vitest.config.ts",
  "mocked/migration.sql"
]
`;

exports[`no-sample-code > should update e2e/fixtures.ts 1`] = `
[
  "import AxeBuilder from \\"@axe-core/playwright\\";",
  "import { test as base } from \\"@playwright/test\\";",
  "import type { User } from \\"next-auth\\";",
  "import { truncate } from \\"../tests/db.setup\\";",
  "import { generatePrismaClient } from \\"./helpers/prisma\\";",
  "import { registerUserToDB } from \\"./helpers/users\\";",
  "import { MePage } from \\"./models/MePage\\";",
  "import { NotFoundPage } from \\"./models/NotFoundPage\\";",
  "import { SignInPage } from \\"./models/SignInPage\\";",
  "import { TopPage } from \\"./models/TopPage\\";",
  "",
  "export type TestFixtures = {",
  "  topPage: TopPage;",
  "  mePage: MePage;",
  "  signInPage: SignInPage;",
  "  notFoundPage: NotFoundPage;",
  "  storageState: string;",
  "  registerToDB: (user: User) => Promise<void>;",
  "  reset: () => Promise<void>;",
  "  a11y: () => AxeBuilder;",
  "};",
  "",
  "// biome-ignore lint: lint/complexity/noBannedTypes",
  "export type WorkerFixtures = {};",
  "",
  "export const test = base.extend<TestFixtures, WorkerFixtures>({",
  "  topPage: ({ page }, use) => {",
  "    use(new TopPage(page));",
  "  },",
  "  mePage: ({ page }, use) => {",
  "    use(new MePage(page));",
  "  },",
  "  signInPage: ({ page }, use) => {",
  "    use(new SignInPage(page));",
  "  },",
  "  notFoundPage: ({ page }, use) => {",
  "    use(new NotFoundPage(page));",
  "  },",
  "  registerToDB: async ({ page, reset }, use) => {",
  "    await use(async (user: User) => {",
  "      await registerUserToDB(user);",
  "    });",
  "    await reset();",
  "  },",
  "  reset: ({ context }, use) => {",
  "    use(async () => {",
  "      await using db = await generatePrismaClient();",
  "      await Promise.all([truncate(db.prisma), context.clearCookies()]);",
  "    });",
  "  },",
  "  a11y: async ({ page }, use) => {",
  "    const makeAxeBuilder = () =>",
  "      new AxeBuilder({ page })",
  "        .withTags([\\"wcag2a\\", \\"wcag2aa\\", \\"wcag21a\\", \\"wcag21aa\\"])",
  "        // global disabled rules",
  "        .disableRules([\\"meta-viewport\\"]);",
  "",
  "    await use(makeAxeBuilder);",
  "  },",
  "});",
  ""
]
`;

exports[`no-sample-code > should update e2e/models/TopPage.ts 1`] = `
[
  "import { type Locator, type Page, expect } from \\"@playwright/test\\";",
  "import type { User } from \\"next-auth\\";",
  "import { Base } from \\"./Base\\";",
  "",
  "export class TopPage extends Base {",
  "  textUserStatusLabelLocator: Locator;",
  "",
  "  constructor(page: Page) {",
  "    super(page);",
  "",
  "    this.textUserStatusLabelLocator = this.page.locator(",
  "      '[aria-label=\\"User status\\"]',",
  "    );",
  "  }",
  "",
  "  async goTo() {",
  "    return await this.page.goto(\\"/\\");",
  "  }",
  "",
  "  async expectUI(state: \\"signIn\\" | \\"signOut\\", user?: User) {",
  "    if (state === \\"signIn\\") {",
  "      await expect(this.textUserStatusLabelLocator).toContainText(",
  "        \`you are signed in as \${user?.name} 😄\`,",
  "      );",
  "    }",
  "",
  "    if (state === \\"signOut\\") {",
  "      await expect(this.textUserStatusLabelLocator).toContainText(",
  "        \\"you are not signed in 🥲\\",",
  "      );",
  "    }",
  "  }",
  "}",
  ""
]
`;

exports[`no-sample-code > should update next.config.ts 1`] = `
[
  "import type { NextConfig } from \\"next\\";",
  "import { config } from \\"./env\\";",
  "",
  "config();",
  "",
  "const nextConfig: NextConfig = {",
  "  async headers() {",
  "    return [",
  "      {",
  "        source: \\"/(.*?)\\",",
  "        headers: [",
  "          {",
  "            key: \\"X-Frame-Options\\",",
  "            value: \\"DENY\\",",
  "          },",
  "          {",
  "            key: \\"X-DNS-Prefetch-Control\\",",
  "            value: \\"on\\",",
  "          },",
  "          {",
  "            key: \\"X-XSS-Protection\\",",
  "            value: \\"1; mode=block\\",",
  "          },",
  "          {",
  "            key: \\"X-Content-Type-Options\\",",
  "            value: \\"nosniff\\",",
  "          },",
  "          {",
  "            key: \\"Referrer-Policy\\",",
  "            value: \\"origin-when-cross-origin\\",",
  "          },",
  "        ],",
  "      },",
  "    ];",
  "  },",
  "  experimental: {",
  "    typedRoutes: true,",
  "    authInterrupts: true,",
  "  },",
  "  webpack: (config, { isServer }) => {",
  "    if (isServer) {",
  "      // https://github.com/open-telemetry/opentelemetry-js/issues/4173",
  "      config.ignoreWarnings = [{ module: /opentelemetry/ }];",
  "    }",
  "    return config;",
  "  },",
  "};",
  "",
  "export default nextConfig;",
  ""
]
`;

exports[`no-sample-code > should update prisma/schema/user.prisma 1`] = `
[
  "enum Role {",
  "  USER",
  "  ADMIN",
  "}",
  "",
  "// https://authjs.dev/getting-started/adapters/prisma#schema",
  "model Account {",
  "  id                String   @id @default(cuid())",
  "  userId            String   @map(\\"user_id\\")",
  "  type              String",
  "  provider          String",
  "  providerAccountId String   @map(\\"provider_account_id\\")",
  "  refresh_token     String?  @db.Text",
  "  access_token      String?  @db.Text",
  "  expires_at        Int?",
  "  token_type        String?",
  "  scope             String?",
  "  id_token          String?  @db.Text",
  "  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)",
  "  createdAt         DateTime @default(now()) @map(\\"created_at\\")",
  "  updatedAt         DateTime @updatedAt @map(\\"updated_at\\")",
  "",
  "  @@unique([provider, providerAccountId])",
  "  @@map(\\"accounts\\")",
  "}",
  "",
  "model User {",
  "  id            String         @id @default(cuid())",
  "  name          String?",
  "  email         String?        @unique",
  "  emailVerified DateTime?      @map(\\"email_verified\\")",
  "  image         String?",
  "  accounts      Account[]",
  "  createdAt     DateTime       @default(now()) @map(\\"created_at\\")",
  "  updatedAt     DateTime       @updatedAt @map(\\"updated_at\\")",
  "  // https://authjs.dev/guides/basics/role-based-access-control",
  "  role          Role           @default(USER)",
  "  stripeId      String?        @unique @map(\\"stripe_id\\") // cus_XXXX",
  "  subscriptions Subscription[]",
  "",
  "  @@map(\\"users\\")",
  "}",
  "",
  "model Subscription {",
  "  id                String    @id @default(cuid())",
  "  subscriptionId    String    @unique @map(\\"subscription_id\\") // sub_XXXX",
  "  status            String",
  "  currentPeriodEnd  DateTime? @map(\\"current_period_end\\")",
  "  cancelAtPeriodEnd Boolean   @default(false) @map(\\"cancel_at_period_end\\")",
  "  createdAt         DateTime  @default(now()) @map(\\"created_at\\")",
  "  updatedAt         DateTime  @updatedAt @map(\\"updated_at\\")",
  "  userId            String    @map(\\"user_id\\")",
  "  user              User      @relation(fields: [userId], references: [id])",
  "",
  "  @@map(\\"subscriptions\\")",
  "}",
  ""
]
`;

exports[`no-sample-code > should update src/app/(public)/page.tsx 1`] = `
[
  "import { getSessionOrReject } from \\"../_actions/auth\\";",
  "",
  "export default async function Page() {",
  "  const session = await getSessionOrReject();",
  "",
  "  return (",
  "    <div className=\\"space-y-10 p-10\\">",
  "      <h1 className=\\"text-2xl text-center\\">Hello World 😄</h1>",
  "      <p className=\\"text-gray-300\\" aria-label=\\"User status\\">",
  "        {session?.data?.user",
  "          ? \`you are signed in as \${session.data.user.name} 😄\`",
  "          : \\"you are not signed in 🥲\\"}",
  "      </p>",
  "    </div>",
  "  );",
  "}",
  ""
]
`;

exports[`no-sample-code > should update src/app/layout.tsx 1`] = `
[
  "import { clsx } from \\"clsx\\";",
  "import type { Metadata, Viewport } from \\"next\\";",
  "import { Inter } from \\"next/font/google\\";",
  "import type { PropsWithChildren } from \\"react\\";",
  "import { Footer } from \\"./_components/Footer\\";",
  "import { Header } from \\"./_components/Header\\";",
  "import \\"./globals.css\\";",
  "",
  "const inter = Inter({ subsets: [\\"latin\\"] });",
  "",
  "export const metadata: Metadata = {",
  "  metadataBase: new URL(process.env.NEXT_PUBLIC_SITE_URL),",
  "  title: \\"😸\\",",
  "  description: \\"\\",",
  "};",
  "",
  "export const viewport: Viewport = {",
  "  maximumScale: 1,",
  "};",
  "",
  "export default function Layout({ children }: PropsWithChildren) {",
  "  return (",
  "    <html lang=\\"en\\">",
  "      <body",
  "        className={clsx(",
  "          \\"bg-gray-800 text-gray-200 flex flex-col min-h-screen\\",",
  "          inter.className,",
  "        )}",
  "      >",
  "        <Header />",
  "        <main className=\\"flex-1\\">{children}</main>",
  "        <Footer />",
  "      </body>",
  "    </html>",
  "  );",
  "}",
  ""
]
`;

exports[`no-sample-code > should update src/middleware.test.ts 1`] = `
[
  "import { beforeEach } from \\"node:test\\";",
  "import type { NextAuthResult } from \\"next-auth\\";",
  "import type { AppRouteHandlerFn } from \\"next/dist/server/route-modules/app-route/module\\";",
  "import {",
  "  getRewrittenUrl,",
  "  isRewrite,",
  "  unstable_doesMiddlewareMatch,",
  "} from \\"next/experimental/testing/server.js\\";",
  "import { NextRequest, type NextResponse } from \\"next/server\\";",
  "import { describe, expect, test, vi } from \\"vitest\\";",
  "import nextConfig from \\"../next.config\\";",
  "import middleware, { config } from \\"./middleware\\";",
  "",
  "type NextAuthRequest = Parameters<Parameters<NextAuthResult[\\"auth\\"]>[0]>[0];",
  "",
  "describe(\\"middleware\\", () => {",
  "  beforeEach(() => {",
  "    vi.mock(\\"next-auth\\", async (actual) => ({",
  "      ...(await actual<typeof import(\\"next-auth\\")>()),",
  "      default: () => ({",
  "        auth: (",
  "          fn: (",
  "            req: NextAuthRequest,",
  "            ctx: AppRouteHandlerFn,",
  "          ) => Promise<NextResponse>,",
  "        ) => fn,",
  "      }),",
  "    }));",
  "  });",
  "",
  "  test(\\"should execute middleware when paths are specified by config\\", () => {",
  "    const fixtures: [string, boolean][] = [",
  "      [\\"/\\", false],",
  "      [\\"/me\\", true],",
  "    ];",
  "",
  "    for (const [url, expected] of fixtures) {",
  "      expect(",
  "        unstable_doesMiddlewareMatch({",
  "          config,",
  "          nextConfig,",
  "          url,",
  "        }),",
  "      ).toEqual(expected);",
  "    }",
  "  });",
  "",
  "  test(\\"should route /signin to when fallback\\", async () => {",
  "    const req = new NextRequest(\\"http://localhost:3000\\");",
  "    const res = (await middleware(req, {})) as NextResponse;",
  "",
  "    expect(isRewrite(res)).toEqual(true);",
  "    expect(getRewrittenUrl(res)).toEqual(\\"http://localhost:3000/signin\\");",
  "  });",
  "",
  "  test(\\"should accept only users having role of user\\", async () => {",
  "    const req = {",
  "      auth: {",
  "        user: {",
  "          role: \\"USER\\",",
  "        },",
  "        expires: \\"expires\\",",
  "      },",
  "    } as NextAuthRequest;",
  "",
  "    const res = (await middleware(req, {})) as NextResponse;",
  "",
  "    expect(isRewrite(res)).toEqual(false);",
  "    expect(getRewrittenUrl(res)).toEqual(null);",
  "  });",
  "});",
  ""
]
`;

exports[`no-sample-code > should update src/middleware.ts 1`] = `
[
  "import NextAuth from \\"next-auth\\";",
  "import type { MiddlewareSourceConfig } from \\"next/experimental/testing/server\\";",
  "import { NextResponse } from \\"next/server\\";",
  "import { config as authConfig } from \\"./app/_clients/nextAuthConfig\\";",
  "",
  "const { auth } = NextAuth(authConfig);",
  "",
  "export const config: MiddlewareSourceConfig = {",
  "  matcher: [\\"/me(.*)\\"],",
  "};",
  "",
  "export default auth(async function middleware(req) {",
  "  if (req.auth?.user.role === \\"USER\\") {",
  "    return NextResponse.next();",
  "  }",
  "",
  "  return NextResponse.rewrite(new URL(\\"/signin\\", req.url));",
  "});",
  ""
]
`;
