enum Role {
  USER
  ADMIN
}

// https://authjs.dev/getting-started/adapters/prisma#schema
model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  accounts      Account[]
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  // https://authjs.dev/guides/basics/role-based-access-control
  role          Role           @default(USER)
  // start: sample
  items         Item[]
  // end: sample
  stripeId      String?        @unique @map("stripe_id") // cus_XXXX
  subscriptions Subscription[]

  @@map("users")
}

model Subscription {
  id                String    @id @default(cuid())
  subscriptionId    String    @unique @map("subscription_id") // sub_XXXX
  status            String
  currentPeriodEnd  DateTime? @map("current_period_end")
  cancelAtPeriodEnd Boolean   @default(false) @map("cancel_at_period_end")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  userId            String    @map("user_id")
  user              User      @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}
